// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="spmv_accel_spmv_accel,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1401,HLS_SYN_LUT=2007,HLS_VERSION=2022_1}" *)

module spmv_accel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        values_address0,
        values_ce0,
        values_q0,
        cols_address0,
        cols_ce0,
        cols_q0,
        rows_address0,
        rows_ce0,
        rows_q0,
        x_address0,
        x_ce0,
        x_q0,
        y_address0,
        y_ce0,
        y_we0,
        y_d0,
        row_size,
        col_size,
        data_size,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] values_address0;
output   values_ce0;
input  [31:0] values_q0;
output  [3:0] cols_address0;
output   cols_ce0;
input  [31:0] cols_q0;
output  [1:0] rows_address0;
output   rows_ce0;
input  [31:0] rows_q0;
output  [1:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [1:0] y_address0;
output   y_ce0;
output   y_we0;
output  [31:0] y_d0;
input  [31:0] row_size;
input  [31:0] col_size;
input  [31:0] data_size;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln103_fu_135_p1;
reg   [63:0] zext_ln103_reg_175;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln103_fu_124_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [1:0] x_local_address0;
reg    x_local_ce0;
reg    x_local_we0;
wire   [31:0] x_local_d0;
wire   [31:0] x_local_q0;
wire   [3:0] grp_spvm_kernel_fu_101_values_address0;
wire    grp_spvm_kernel_fu_101_values_ce0;
wire   [31:0] grp_spvm_kernel_fu_101_values_d0;
wire    grp_spvm_kernel_fu_101_values_we0;
wire   [3:0] grp_spvm_kernel_fu_101_values_address1;
wire    grp_spvm_kernel_fu_101_values_ce1;
wire   [31:0] grp_spvm_kernel_fu_101_values_d1;
wire    grp_spvm_kernel_fu_101_values_we1;
wire   [3:0] grp_spvm_kernel_fu_101_cols_address0;
wire    grp_spvm_kernel_fu_101_cols_ce0;
wire   [31:0] grp_spvm_kernel_fu_101_cols_d0;
wire    grp_spvm_kernel_fu_101_cols_we0;
wire   [3:0] grp_spvm_kernel_fu_101_cols_address1;
wire    grp_spvm_kernel_fu_101_cols_ce1;
wire   [31:0] grp_spvm_kernel_fu_101_cols_d1;
wire    grp_spvm_kernel_fu_101_cols_we1;
wire   [1:0] grp_spvm_kernel_fu_101_rows_address0;
wire    grp_spvm_kernel_fu_101_rows_ce0;
wire   [31:0] grp_spvm_kernel_fu_101_rows_d0;
wire    grp_spvm_kernel_fu_101_rows_we0;
wire   [1:0] grp_spvm_kernel_fu_101_rows_address1;
wire    grp_spvm_kernel_fu_101_rows_ce1;
wire   [31:0] grp_spvm_kernel_fu_101_rows_d1;
wire    grp_spvm_kernel_fu_101_rows_we1;
wire   [1:0] grp_spvm_kernel_fu_101_x_local_address0;
wire    grp_spvm_kernel_fu_101_x_local_ce0;
wire   [31:0] grp_spvm_kernel_fu_101_x_local_d0;
wire    grp_spvm_kernel_fu_101_x_local_we0;
wire   [1:0] grp_spvm_kernel_fu_101_x_local_address1;
wire    grp_spvm_kernel_fu_101_x_local_ce1;
wire   [31:0] grp_spvm_kernel_fu_101_x_local_d1;
wire    grp_spvm_kernel_fu_101_x_local_we1;
wire   [1:0] grp_spvm_kernel_fu_101_y_address0;
wire    grp_spvm_kernel_fu_101_y_ce0;
wire   [31:0] grp_spvm_kernel_fu_101_y_d0;
wire    grp_spvm_kernel_fu_101_y_we0;
wire   [1:0] grp_spvm_kernel_fu_101_y_address1;
wire    grp_spvm_kernel_fu_101_y_ce1;
wire   [31:0] grp_spvm_kernel_fu_101_y_d1;
wire    grp_spvm_kernel_fu_101_y_we1;
wire    grp_spvm_kernel_fu_101_ap_start;
wire    grp_spvm_kernel_fu_101_ap_done;
wire    grp_spvm_kernel_fu_101_ap_ready;
wire    grp_spvm_kernel_fu_101_ap_idle;
reg    grp_spvm_kernel_fu_101_ap_continue;
reg    grp_spvm_kernel_fu_101_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_sync_grp_spvm_kernel_fu_101_ap_ready;
wire    ap_sync_grp_spvm_kernel_fu_101_ap_done;
reg    ap_block_state5_on_subcall_done;
reg    ap_sync_reg_grp_spvm_kernel_fu_101_ap_ready;
reg    ap_sync_reg_grp_spvm_kernel_fu_101_ap_done;
wire    ap_block_pp0_stage0;
reg   [31:0] i_fu_50;
wire   [31:0] add_ln103_fu_129_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_spvm_kernel_fu_101_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_spvm_kernel_fu_101_ap_ready = 1'b0;
#0 ap_sync_reg_grp_spvm_kernel_fu_101_ap_done = 1'b0;
end

spmv_accel_x_local_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
x_local_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_local_address0),
    .ce0(x_local_ce0),
    .we0(x_local_we0),
    .d0(x_local_d0),
    .q0(x_local_q0)
);

spmv_accel_spvm_kernel grp_spvm_kernel_fu_101(
    .values_address0(grp_spvm_kernel_fu_101_values_address0),
    .values_ce0(grp_spvm_kernel_fu_101_values_ce0),
    .values_d0(grp_spvm_kernel_fu_101_values_d0),
    .values_q0(values_q0),
    .values_we0(grp_spvm_kernel_fu_101_values_we0),
    .values_address1(grp_spvm_kernel_fu_101_values_address1),
    .values_ce1(grp_spvm_kernel_fu_101_values_ce1),
    .values_d1(grp_spvm_kernel_fu_101_values_d1),
    .values_q1(32'd0),
    .values_we1(grp_spvm_kernel_fu_101_values_we1),
    .cols_address0(grp_spvm_kernel_fu_101_cols_address0),
    .cols_ce0(grp_spvm_kernel_fu_101_cols_ce0),
    .cols_d0(grp_spvm_kernel_fu_101_cols_d0),
    .cols_q0(cols_q0),
    .cols_we0(grp_spvm_kernel_fu_101_cols_we0),
    .cols_address1(grp_spvm_kernel_fu_101_cols_address1),
    .cols_ce1(grp_spvm_kernel_fu_101_cols_ce1),
    .cols_d1(grp_spvm_kernel_fu_101_cols_d1),
    .cols_q1(32'd0),
    .cols_we1(grp_spvm_kernel_fu_101_cols_we1),
    .rows_address0(grp_spvm_kernel_fu_101_rows_address0),
    .rows_ce0(grp_spvm_kernel_fu_101_rows_ce0),
    .rows_d0(grp_spvm_kernel_fu_101_rows_d0),
    .rows_q0(rows_q0),
    .rows_we0(grp_spvm_kernel_fu_101_rows_we0),
    .rows_address1(grp_spvm_kernel_fu_101_rows_address1),
    .rows_ce1(grp_spvm_kernel_fu_101_rows_ce1),
    .rows_d1(grp_spvm_kernel_fu_101_rows_d1),
    .rows_q1(32'd0),
    .rows_we1(grp_spvm_kernel_fu_101_rows_we1),
    .x_local_address0(grp_spvm_kernel_fu_101_x_local_address0),
    .x_local_ce0(grp_spvm_kernel_fu_101_x_local_ce0),
    .x_local_d0(grp_spvm_kernel_fu_101_x_local_d0),
    .x_local_q0(x_local_q0),
    .x_local_we0(grp_spvm_kernel_fu_101_x_local_we0),
    .x_local_address1(grp_spvm_kernel_fu_101_x_local_address1),
    .x_local_ce1(grp_spvm_kernel_fu_101_x_local_ce1),
    .x_local_d1(grp_spvm_kernel_fu_101_x_local_d1),
    .x_local_q1(32'd0),
    .x_local_we1(grp_spvm_kernel_fu_101_x_local_we1),
    .y_address0(grp_spvm_kernel_fu_101_y_address0),
    .y_ce0(grp_spvm_kernel_fu_101_y_ce0),
    .y_d0(grp_spvm_kernel_fu_101_y_d0),
    .y_q0(32'd0),
    .y_we0(grp_spvm_kernel_fu_101_y_we0),
    .y_address1(grp_spvm_kernel_fu_101_y_address1),
    .y_ce1(grp_spvm_kernel_fu_101_y_ce1),
    .y_d1(grp_spvm_kernel_fu_101_y_d1),
    .y_q1(32'd0),
    .y_we1(grp_spvm_kernel_fu_101_y_we1),
    .row_size(row_size),
    .data_size(data_size),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .row_size_ap_vld(1'b1),
    .ap_start(grp_spvm_kernel_fu_101_ap_start),
    .data_size_ap_vld(1'b1),
    .ap_done(grp_spvm_kernel_fu_101_ap_done),
    .ap_ready(grp_spvm_kernel_fu_101_ap_ready),
    .ap_idle(grp_spvm_kernel_fu_101_ap_idle),
    .ap_continue(grp_spvm_kernel_fu_101_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_spvm_kernel_fu_101_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_sync_reg_grp_spvm_kernel_fu_101_ap_done <= 1'b0;
        end else if ((grp_spvm_kernel_fu_101_ap_done == 1'b1)) begin
            ap_sync_reg_grp_spvm_kernel_fu_101_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_spvm_kernel_fu_101_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_sync_reg_grp_spvm_kernel_fu_101_ap_ready <= 1'b0;
        end else if ((grp_spvm_kernel_fu_101_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_spvm_kernel_fu_101_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_spvm_kernel_fu_101_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state5) & (ap_sync_grp_spvm_kernel_fu_101_ap_ready == 1'b0)))) begin
            grp_spvm_kernel_fu_101_ap_start_reg <= 1'b1;
        end else if ((grp_spvm_kernel_fu_101_ap_ready == 1'b1)) begin
            grp_spvm_kernel_fu_101_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_50 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln103_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_50 <= add_ln103_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln103_reg_175[31 : 0] <= zext_ln103_fu_135_p1[31 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln103_fu_124_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        grp_spvm_kernel_fu_101_ap_continue = 1'b1;
    end else begin
        grp_spvm_kernel_fu_101_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_local_address0 = zext_ln103_reg_175;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_local_address0 = grp_spvm_kernel_fu_101_x_local_address0;
    end else begin
        x_local_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_local_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_local_ce0 = grp_spvm_kernel_fu_101_x_local_ce0;
    end else begin
        x_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_local_we0 = 1'b1;
    end else begin
        x_local_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln103_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln103_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_fu_129_p2 = (i_fu_50 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_on_subcall_done = ((ap_sync_grp_spvm_kernel_fu_101_ap_ready & ap_sync_grp_spvm_kernel_fu_101_ap_done) == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = 32'd0;

assign ap_sync_grp_spvm_kernel_fu_101_ap_done = (grp_spvm_kernel_fu_101_ap_done | ap_sync_reg_grp_spvm_kernel_fu_101_ap_done);

assign ap_sync_grp_spvm_kernel_fu_101_ap_ready = (grp_spvm_kernel_fu_101_ap_ready | ap_sync_reg_grp_spvm_kernel_fu_101_ap_ready);

assign cols_address0 = grp_spvm_kernel_fu_101_cols_address0;

assign cols_ce0 = grp_spvm_kernel_fu_101_cols_ce0;

assign grp_spvm_kernel_fu_101_ap_start = grp_spvm_kernel_fu_101_ap_start_reg;

assign icmp_ln103_fu_124_p2 = ((i_fu_50 == col_size) ? 1'b1 : 1'b0);

assign rows_address0 = grp_spvm_kernel_fu_101_rows_address0;

assign rows_ce0 = grp_spvm_kernel_fu_101_rows_ce0;

assign values_address0 = grp_spvm_kernel_fu_101_values_address0;

assign values_ce0 = grp_spvm_kernel_fu_101_values_ce0;

assign x_address0 = zext_ln103_fu_135_p1;

assign x_local_d0 = x_q0;

assign y_address0 = grp_spvm_kernel_fu_101_y_address0;

assign y_ce0 = grp_spvm_kernel_fu_101_y_ce0;

assign y_d0 = grp_spvm_kernel_fu_101_y_d0;

assign y_we0 = grp_spvm_kernel_fu_101_y_we0;

assign zext_ln103_fu_135_p1 = i_fu_50;

always @ (posedge ap_clk) begin
    zext_ln103_reg_175[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //spmv_accel
