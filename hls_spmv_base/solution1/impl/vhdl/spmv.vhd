-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity spmv is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of spmv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "spmv_spmv,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.274000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2003,HLS_SYN_LUT=3107,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal rowPtr_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rowPtr_ce0 : STD_LOGIC;
    signal rowPtr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal columnIndex_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal values_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_ce0 : STD_LOGIC;
    signal y_we0 : STD_LOGIC;
    signal y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln16_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_reg_423 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln16_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln18_fu_204_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln18_reg_428 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal rowPtr_load_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_spmv_Pipeline_L2_fu_158_ap_return : STD_LOGIC_VECTOR (2 downto 0);
    signal targetBlock_reg_453 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_spmv_Pipeline_L2_fu_158_ap_start : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_ap_done : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_ap_idle : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_ap_ready : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_values_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_spmv_Pipeline_L2_fu_158_values_ce0 : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_columnIndex_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_spmv_Pipeline_L2_fu_158_columnIndex_ce0 : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_x_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_spmv_Pipeline_L2_fu_158_x_ce0 : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_y0_0_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_158_y0_0_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_6_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_6_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_5_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_5_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_4_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_4_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_3_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_3_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_2_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_1_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_spmv_Pipeline_L2_fu_158_y0_1_out_ap_vld : STD_LOGIC;
    signal grp_spmv_Pipeline_L2_fu_158_ap_start_reg : STD_LOGIC := '0';
    signal y0_0_loc_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_1_6_loc_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_1_5_loc_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_1_4_loc_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_1_3_loc_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_1_2_loc_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_1_1_loc_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_1_loc_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_fu_88 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv_next6_fu_193_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_213_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln18_fu_220_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_16_fu_224_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_230_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_17_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_18_fu_274_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_21_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_fu_287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_23_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_22_fu_300_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_25_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_24_fu_313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_27_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_fu_326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_29_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_28_fu_339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_lcssa_fu_352_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component spmv_spmv_Pipeline_L2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln18 : IN STD_LOGIC_VECTOR (31 downto 0);
        sext_ln18_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        values_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        values_ce0 : OUT STD_LOGIC;
        values_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        columnIndex_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        columnIndex_ce0 : OUT STD_LOGIC;
        columnIndex_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y0_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_0_out_ap_vld : OUT STD_LOGIC;
        y0_1_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_1_6_out_ap_vld : OUT STD_LOGIC;
        y0_1_5_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_1_5_out_ap_vld : OUT STD_LOGIC;
        y0_1_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_1_4_out_ap_vld : OUT STD_LOGIC;
        y0_1_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_1_3_out_ap_vld : OUT STD_LOGIC;
        y0_1_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_1_2_out_ap_vld : OUT STD_LOGIC;
        y0_1_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_1_1_out_ap_vld : OUT STD_LOGIC;
        y0_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        y0_1_out_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component spmv_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        y_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        y_ce0 : IN STD_LOGIC;
        y_we0 : IN STD_LOGIC;
        y_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        rowPtr_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        rowPtr_ce0 : IN STD_LOGIC;
        rowPtr_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        columnIndex_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        columnIndex_ce0 : IN STD_LOGIC;
        columnIndex_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        values_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        values_ce0 : IN STD_LOGIC;
        values_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        x_ce0 : IN STD_LOGIC;
        x_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    grp_spmv_Pipeline_L2_fu_158 : component spmv_spmv_Pipeline_L2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_spmv_Pipeline_L2_fu_158_ap_start,
        ap_done => grp_spmv_Pipeline_L2_fu_158_ap_done,
        ap_idle => grp_spmv_Pipeline_L2_fu_158_ap_idle,
        ap_ready => grp_spmv_Pipeline_L2_fu_158_ap_ready,
        sext_ln18 => k_reg_438,
        sext_ln18_1 => rowPtr_load_reg_448,
        values_address0 => grp_spmv_Pipeline_L2_fu_158_values_address0,
        values_ce0 => grp_spmv_Pipeline_L2_fu_158_values_ce0,
        values_q0 => values_q0,
        columnIndex_address0 => grp_spmv_Pipeline_L2_fu_158_columnIndex_address0,
        columnIndex_ce0 => grp_spmv_Pipeline_L2_fu_158_columnIndex_ce0,
        columnIndex_q0 => columnIndex_q0,
        x_address0 => grp_spmv_Pipeline_L2_fu_158_x_address0,
        x_ce0 => grp_spmv_Pipeline_L2_fu_158_x_ce0,
        x_q0 => x_q0,
        y0_0_out => grp_spmv_Pipeline_L2_fu_158_y0_0_out,
        y0_0_out_ap_vld => grp_spmv_Pipeline_L2_fu_158_y0_0_out_ap_vld,
        y0_1_6_out => grp_spmv_Pipeline_L2_fu_158_y0_1_6_out,
        y0_1_6_out_ap_vld => grp_spmv_Pipeline_L2_fu_158_y0_1_6_out_ap_vld,
        y0_1_5_out => grp_spmv_Pipeline_L2_fu_158_y0_1_5_out,
        y0_1_5_out_ap_vld => grp_spmv_Pipeline_L2_fu_158_y0_1_5_out_ap_vld,
        y0_1_4_out => grp_spmv_Pipeline_L2_fu_158_y0_1_4_out,
        y0_1_4_out_ap_vld => grp_spmv_Pipeline_L2_fu_158_y0_1_4_out_ap_vld,
        y0_1_3_out => grp_spmv_Pipeline_L2_fu_158_y0_1_3_out,
        y0_1_3_out_ap_vld => grp_spmv_Pipeline_L2_fu_158_y0_1_3_out_ap_vld,
        y0_1_2_out => grp_spmv_Pipeline_L2_fu_158_y0_1_2_out,
        y0_1_2_out_ap_vld => grp_spmv_Pipeline_L2_fu_158_y0_1_2_out_ap_vld,
        y0_1_1_out => grp_spmv_Pipeline_L2_fu_158_y0_1_1_out,
        y0_1_1_out_ap_vld => grp_spmv_Pipeline_L2_fu_158_y0_1_1_out_ap_vld,
        y0_1_out => grp_spmv_Pipeline_L2_fu_158_y0_1_out,
        y0_1_out_ap_vld => grp_spmv_Pipeline_L2_fu_158_y0_1_out_ap_vld,
        ap_return => grp_spmv_Pipeline_L2_fu_158_ap_return);

    control_s_axi_U : component spmv_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        y_address0 => y_address0,
        y_ce0 => y_ce0,
        y_we0 => y_we0,
        y_d0 => y_d0,
        rowPtr_address0 => rowPtr_address0,
        rowPtr_ce0 => rowPtr_ce0,
        rowPtr_q0 => rowPtr_q0,
        columnIndex_address0 => grp_spmv_Pipeline_L2_fu_158_columnIndex_address0,
        columnIndex_ce0 => grp_spmv_Pipeline_L2_fu_158_columnIndex_ce0,
        columnIndex_q0 => columnIndex_q0,
        values_address0 => grp_spmv_Pipeline_L2_fu_158_values_address0,
        values_ce0 => grp_spmv_Pipeline_L2_fu_158_values_ce0,
        values_q0 => values_q0,
        x_address0 => grp_spmv_Pipeline_L2_fu_158_x_address0,
        x_ce0 => grp_spmv_Pipeline_L2_fu_158_x_ce0,
        x_q0 => x_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_spmv_Pipeline_L2_fu_158_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_spmv_Pipeline_L2_fu_158_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_spmv_Pipeline_L2_fu_158_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_spmv_Pipeline_L2_fu_158_ap_ready = ap_const_logic_1)) then 
                    grp_spmv_Pipeline_L2_fu_158_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_88 <= ap_const_lv3_0;
            elsif (((icmp_ln16_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_88 <= indvars_iv_next6_fu_193_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_438 <= rowPtr_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                rowPtr_load_reg_448 <= rowPtr_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                targetBlock_reg_453 <= grp_spmv_Pipeline_L2_fu_158_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln18_reg_428 <= trunc_ln18_fu_204_p1;
                    zext_ln16_reg_423(2 downto 0) <= zext_ln16_fu_199_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_spmv_Pipeline_L2_fu_158_y0_0_out_ap_vld = ap_const_logic_1))) then
                y0_0_loc_fu_120 <= grp_spmv_Pipeline_L2_fu_158_y0_0_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_spmv_Pipeline_L2_fu_158_y0_1_1_out_ap_vld = ap_const_logic_1))) then
                y0_1_1_loc_fu_96 <= grp_spmv_Pipeline_L2_fu_158_y0_1_1_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_spmv_Pipeline_L2_fu_158_y0_1_2_out_ap_vld = ap_const_logic_1))) then
                y0_1_2_loc_fu_100 <= grp_spmv_Pipeline_L2_fu_158_y0_1_2_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_spmv_Pipeline_L2_fu_158_y0_1_3_out_ap_vld = ap_const_logic_1))) then
                y0_1_3_loc_fu_104 <= grp_spmv_Pipeline_L2_fu_158_y0_1_3_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_spmv_Pipeline_L2_fu_158_y0_1_4_out_ap_vld = ap_const_logic_1))) then
                y0_1_4_loc_fu_108 <= grp_spmv_Pipeline_L2_fu_158_y0_1_4_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_spmv_Pipeline_L2_fu_158_y0_1_5_out_ap_vld = ap_const_logic_1))) then
                y0_1_5_loc_fu_112 <= grp_spmv_Pipeline_L2_fu_158_y0_1_5_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_spmv_Pipeline_L2_fu_158_y0_1_6_out_ap_vld = ap_const_logic_1))) then
                y0_1_6_loc_fu_116 <= grp_spmv_Pipeline_L2_fu_158_y0_1_6_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_spmv_Pipeline_L2_fu_158_y0_1_out_ap_vld = ap_const_logic_1))) then
                y0_1_loc_fu_92 <= grp_spmv_Pipeline_L2_fu_158_y0_1_out;
            end if;
        end if;
    end process;
    zext_ln16_reg_423(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln16_fu_187_p2, ap_CS_fsm_state5, grp_spmv_Pipeline_L2_fu_158_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln16_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_spmv_Pipeline_L2_fu_158_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_spmv_Pipeline_L2_fu_158_ap_done)
    begin
        if ((grp_spmv_Pipeline_L2_fu_158_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_187_p2)
    begin
        if (((icmp_ln16_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_187_p2)
    begin
        if (((icmp_ln16_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_16_fu_224_p2 <= std_logic_vector(unsigned(zext_ln18_fu_220_p1) + unsigned(ap_const_lv5_4));
    empty_17_fu_269_p2 <= "1" when (targetBlock_reg_453 = ap_const_lv3_0) else "0";
    empty_18_fu_274_p3 <= 
        y0_0_loc_fu_120 when (empty_17_fu_269_p2(0) = '1') else 
        y0_1_loc_fu_92;
    empty_19_fu_282_p2 <= "1" when (targetBlock_reg_453 = ap_const_lv3_1) else "0";
    empty_20_fu_287_p3 <= 
        y0_1_6_loc_fu_116 when (empty_19_fu_282_p2(0) = '1') else 
        empty_18_fu_274_p3;
    empty_21_fu_295_p2 <= "1" when (targetBlock_reg_453 = ap_const_lv3_2) else "0";
    empty_22_fu_300_p3 <= 
        y0_1_5_loc_fu_112 when (empty_21_fu_295_p2(0) = '1') else 
        empty_20_fu_287_p3;
    empty_23_fu_308_p2 <= "1" when (targetBlock_reg_453 = ap_const_lv3_3) else "0";
    empty_24_fu_313_p3 <= 
        y0_1_4_loc_fu_108 when (empty_23_fu_308_p2(0) = '1') else 
        empty_22_fu_300_p3;
    empty_25_fu_321_p2 <= "1" when (targetBlock_reg_453 = ap_const_lv3_4) else "0";
    empty_26_fu_326_p3 <= 
        y0_1_3_loc_fu_104 when (empty_25_fu_321_p2(0) = '1') else 
        empty_24_fu_313_p3;
    empty_27_fu_334_p2 <= "1" when (targetBlock_reg_453 = ap_const_lv3_5) else "0";
    empty_28_fu_339_p3 <= 
        y0_1_2_loc_fu_100 when (empty_27_fu_334_p2(0) = '1') else 
        empty_26_fu_326_p3;
    empty_29_fu_347_p2 <= "1" when (targetBlock_reg_453 = ap_const_lv3_6) else "0";
    grp_spmv_Pipeline_L2_fu_158_ap_start <= grp_spmv_Pipeline_L2_fu_158_ap_start_reg;
    icmp_ln16_fu_187_p2 <= "1" when (i_fu_88 = ap_const_lv3_4) else "0";
    indvars_iv_next6_fu_193_p2 <= std_logic_vector(unsigned(i_fu_88) + unsigned(ap_const_lv3_1));
    p_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_230_p4),64));

    rowPtr_address0_assign_proc : process(zext_ln16_fu_199_p1, ap_CS_fsm_state2, ap_CS_fsm_state3, p_cast_fu_240_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rowPtr_address0 <= p_cast_fu_240_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rowPtr_address0 <= zext_ln16_fu_199_p1(3 - 1 downto 0);
        else 
            rowPtr_address0 <= "XXX";
        end if; 
    end process;


    rowPtr_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rowPtr_ce0 <= ap_const_logic_1;
        else 
            rowPtr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_213_p3 <= (trunc_ln18_reg_428 & ap_const_lv2_0);
    tmp_1_fu_230_p4 <= empty_16_fu_224_p2(4 downto 2);
    trunc_ln18_fu_204_p1 <= i_fu_88(2 - 1 downto 0);
    y0_lcssa_fu_352_p3 <= 
        y0_1_1_loc_fu_96 when (empty_29_fu_347_p2(0) = '1') else 
        empty_28_fu_339_p3;
    y_address0 <= zext_ln16_reg_423(2 - 1 downto 0);

    y_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_d0 <= y0_lcssa_fu_352_p3;

    y_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln16_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_88),64));
    zext_ln18_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_213_p3),5));
end behav;
